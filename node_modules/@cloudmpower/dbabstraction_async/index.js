(function(){

    module.exports = function(modelName){

        var getMethod = require("../../../nodedb/config/getGlobalMethod");

        var methodName = getMethod.FileName;

        var model = getMethod(methodName.database)[modelName];

        return {
            "save"          : async (data) => {
                var modelObj = new model(data);
                var response;
                await modelObj.save((err, res) => {
                    if(err) response = null;
                    if(res) response = res.toObject();
                });
                return response;
            },
            "find"          : async (query, fields, options) => {
                var field = (typeof fields != "string") ? '' : fields;
                options = (typeof options != "object") ? {} : options;
                return await model.find(query, field, options);
            },
            "findOne"       : async (query, fields, options) => {
                var field = (typeof fields != "string") ? '' : fields;
                options = (typeof options != "object") ? {} : options;
                return await model.findOne(query, field, options);
            },
            "update"        : async (query, update, options) => {
                options = (typeof options != "object") ? { "dontSet": false } : options;
                update = (typeof update != "object") ? {} : update;
                var updateDbObj = (options.dontSet)? update: {"$set" : update };
                var response = await model.update(query, updateDbObj, options);

                var updatedObj = {"update": true, n: response.n };
                if(response.n < 1) updatedObj = null;
                return updatedObj;
            },
            "delete"        : async (query) => {
                var response;
                await model.remove(query, (err, res) => {
                    if(err) response = null;
                    if(res){
                        var deletedObj = {"delete": true, n: res.n};
                        if(res.n < 1) deletedObj = null;
                        response = deletedObj;
                    }
                });
                return response;
            },
            "distinct"        : async (field, condition) => {
                let fieldName = (typeof field != "string") ? '' : field;
                let conditn = (typeof condition != "object") ? null : condition;
                return await model.distinct(fieldName, conditn);
            }
        };
    };
})();